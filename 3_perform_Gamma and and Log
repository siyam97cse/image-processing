import cv2
import numpy as np

def gamma_correction(image, gamma):
    """Applies gamma correction on the input image."""
    # Build a lookup table for all pixel values [0-255]
    lookup_table = np.array([((i / 255.0) ** gamma) * 255 for i in np.arange(256)]).astype("uint8")
    # Apply gamma correction using the lookup table
    return cv2.LUT(image, lookup_table)

def log_transformation(image, c=1):
    """Applies log transformation on the input image."""
    # Convert image to float32 for accuracy in logarithmic calculation
    image_float = np.float32(image)
    # Apply log transformation
    log_image = c * (np.log(1 + image_float))
    # Normalize to range [0, 255]
    log_image = cv2.normalize(log_image, None, 0, 255, cv2.NORM_MINMAX)
    return np.uint8(log_image)

# Load an image (can be grayscale or color)
image_path = input("Enter the path of the image: ")
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Check if the image was loaded successfully
if image is None:
    print("Error loading image. Please check the path.")
else:
    # Parameters for transformations
    gamma_value = 2.0  # Adjust gamma (>1.0 to brighten, <1.0 to darken)
    log_constant = 40  # Scaling constant for log transformation

    # Apply transformations
    gamma_corrected_image = gamma_correction(image, gamma=gamma_value)
    log_transformed_image = log_transformation(image, c=log_constant)

    # Display the results
    cv2.imshow("Original Image", image)
    cv2.imshow("Gamma Corrected Image", gamma_corrected_image)
    cv2.imshow("Log Transformed Image", log_transformed_image)

    # Wait for a key press and close windows
    cv2.waitKey(0)
    cv2.destroyAllWindows()
